import streamlit as st
from goal import Goal
from agent import AIAgent
import matplotlib.pyplot as plt
import pandas as pd
import json
import os
from io import BytesIO

st.set_page_config(page_title="–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ò–ò-–ê–≥–µ–Ω—Ç", layout="centered")
st.title("ü§ñ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ò–ò-–ê–≥–µ–Ω—Ç")

SAVE_LOG = "log.json"
SAVE_GOALS = "goals.json"

if 'agent' not in st.session_state:
    agent = AIAgent()
    agent.goals.add_goal(Goal("–ò–∑—É—á–∏—Ç—å Python", priority=1.0))
    agent.goals.add_goal(Goal("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ò–ò", priority=1.5))
    agent.goals.add_goal(Goal("–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é", priority=0.8))
    st.session_state.agent = agent

agent = st.session_state.agent

st.sidebar.header("üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
mood = st.sidebar.slider("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞", 0.5, 1.5, agent.motivation.mood, step=0.01)
agent.motivation.mood = mood

st.sidebar.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å")
with st.sidebar.form("goal_form"):
    goal_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏")
    goal_priority = st.slider("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", 0.1, 2.0, 1.0)
    goal_submit = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
    if goal_submit and goal_name:
        agent.goals.add_goal(Goal(goal_name, goal_priority))
        st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–µ–ª—å: {goal_name}")

st.sidebar.subheader("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ / –ó–∞–≥—Ä—É–∑–∫–∞")
col1, col2 = st.sidebar.columns(2)
if col1.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥"):
    agent.memory.save_to_file(SAVE_LOG)
    with open(SAVE_GOALS, "w", encoding="utf-8") as f:
        json.dump([{"name": g.name, "priority": g.priority, "progress": g.progress} for g in agent.goals.goals], f)
    st.sidebar.success("–õ–æ–≥ –∏ —Ü–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

if col2.button("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥"):
    if os.path.exists(SAVE_LOG):
        with open(SAVE_LOG, "r", encoding="utf-8") as f:
            agent.memory.log = json.load(f)
        st.sidebar.success("–õ–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω!")
    else:
        st.sidebar.warning("–§–∞–π–ª log.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    if os.path.exists(SAVE_GOALS):
        with open(SAVE_GOALS, "r", encoding="utf-8") as f:
            agent.goals.goals = [Goal(**g) for g in json.load(f)]
        st.sidebar.success("–¶–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    else:
        st.sidebar.warning("–§–∞–π–ª goals.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")

if st.sidebar.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"):
    agent.goals.goals.clear()
    agent.memory.log.clear()
    st.sidebar.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

# –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–∞
if agent.memory.log:
    log_bytes = BytesIO()
    log_bytes.write(json.dumps(agent.memory.log, indent=2, ensure_ascii=False).encode('utf-8'))
    log_bytes.seek(0)
    st.sidebar.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥",
        data=log_bytes,
        file_name="log.json",
        mime="application/json"
    )

# –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π
if agent.goals.goals:
    goals_bytes = BytesIO()
    goals_bytes.write(json.dumps([
        {"name": g.name, "priority": g.priority, "progress": g.progress} for g in agent.goals.goals
    ], indent=2, ensure_ascii=False).encode('utf-8'))
    goals_bytes.seek(0)
    st.sidebar.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å —Ü–µ–ª–∏",
        data=goals_bytes,
        file_name="goals.json",
        mime="application/json"
    )

with st.form("run_form"):
    steps = st.slider("–°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å?", 1, 50, 5)
    submitted = st.form_submit_button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å")
    if submitted:
        for _ in range(steps):
            agent.run_step()

st.subheader("üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏")
active_goals = agent.goals.get_active_goals()
for g in active_goals:
    st.write(f"{g.name}: {g.progress:.2f} / 1.0 (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {g.priority:.2f})")

st.subheader("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º")
data = agent.memory.log
if data:
    df = pd.DataFrame(data)
    fig, ax = plt.subplots()
    for goal in df['goal'].unique():
        goal_df = df[df['goal'] == goal]
        cumulative = goal_df['progress_delta'].cumsum()
        ax.plot(goal_df['step'], cumulative, label=goal)
    ax.set_xlabel("–®–∞–≥")
    ax.set_ylabel("–ü—Ä–æ–≥—Ä–µ—Å—Å")
    ax.set_title("–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
    ax.legend()
    ax.grid(True)
    st.pyplot(fig)
else:
    st.info("–õ–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–ø—É—Å—Ç–∏ —à–∞–≥–∏ –≤—ã—à–µ.")

# üß† –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞
st.subheader("üß† –ß—Ç–æ –∑–Ω–∞–µ—Ç –∞–≥–µ–Ω—Ç?")
if data:
    st.dataframe(df)
else:
    st.info("–ê–≥–µ–Ω—Ç –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞–µ—Ç.")
